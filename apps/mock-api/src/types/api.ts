/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/locations/batch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 位置情報のバッチ送信
         * @description 複数の位置情報を一括で送信します。単一の位置情報を送信する場合も、配列に1つだけ含めて送信してください。
         */
        post: operations["postLocationsBatch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * ヘルスチェック
         * @description APIサーバーの稼働状態を確認します
         */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Location: {
            /**
             * Format: double
             * @description 緯度
             * @example 35.6812
             */
            latitude: number;
            /**
             * Format: double
             * @description 経度
             * @example 139.7671
             */
            longitude: number;
            /**
             * Format: float
             * @description 位置精度（メートル）
             * @example 5
             */
            accuracy?: number;
            /**
             * Format: date-time
             * @description 記録時刻（ISO 8601形式）
             * @example 2024-01-15T10:30:00Z
             */
            timestamp: string;
            /**
             * Format: double
             * @description 高度（メートル）
             * @example 45.2
             */
            altitude?: number;
            /**
             * Format: float
             * @description 速度（メートル/秒）
             * @example 1.5
             */
            speed?: number;
            /**
             * Format: float
             * @description 方角（度、0-360）
             * @example 180
             */
            heading?: number;
            /**
             * Format: float
             * @description バッテリー残量（0.0-1.0）
             * @example 0.85
             */
            battery_level?: number;
            /**
             * @description 移動手段
             * @example walking
             * @enum {string}
             */
            activity_type?: "unknown" | "stationary" | "walking" | "running" | "automotive" | "cycling";
        };
        DeviceInfo: {
            /**
             * @description デバイスモデル
             * @example iPhone14,2
             */
            model?: string;
            /**
             * @description OSバージョン
             * @example iOS 17.0
             */
            os_version?: string;
        };
        LocationBatch: {
            /**
             * Format: uuid
             * @description デバイス識別子（UUID形式）
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            device_id: string;
            device_info?: components["schemas"]["DeviceInfo"];
            /** @description 位置情報の配列 */
            locations: components["schemas"]["Location"][];
        };
        Error: {
            /**
             * @description エラーコード
             * @example INVALID_REQUEST
             */
            error: string;
            /**
             * @description エラーメッセージ
             * @example Invalid latitude value
             */
            message: string;
            /** @description 詳細なエラー情報 */
            details?: Record<string, never>;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    postLocationsBatch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LocationBatch"];
            };
        };
        responses: {
            /** @description 位置情報が正常に記録されました */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Successfully recorded 2 locations */
                        message?: string;
                        /** @example 2 */
                        received_count?: number;
                    };
                };
            };
            /** @description リクエストが不正です */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description サーバーエラー */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description サーバーは正常に稼働しています */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example healthy */
                        status?: string;
                        /**
                         * Format: date-time
                         * @example 2024-01-15T10:30:00Z
                         */
                        timestamp?: string;
                    };
                };
            };
        };
    };
}
